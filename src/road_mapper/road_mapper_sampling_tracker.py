'''
Input: This program reads two text files, each one containing a list of PNG filenames generated by road_mapper_sampling.
Output: The following inconsistencies are reported:
    - PNG filename belongs to one list but not to the other,
    - Not all the PNG filenames for specific coordinates (x,y) are present (i.e. all expected rotation angles and offsets). 
'''

import sys, os, argparse

# Global definitions
distance_sample = 5.0    # meters
distance_offset = 0.5    # meters
n_offset =          3    # n shifts to the left and n shifts to the right
n_rotation =       24    # delta = (360 degrees / n_rotation) degrees
VERBOSE =           1

def compare_lists(fl1, listname1, fl2, listname2):
    cont1 = 0
    cont2 = 0
    i1 = 0
    i2 = 0
    while i1 < len(fl1) or i2 < len(fl2):
        tx1 = chr(0xff) 
        tx2 = chr(0xff) 
        if i1 < len(fl1):
            tx1 = fl1[i1]
        if i2 < len(fl2):
            tx2 = fl2[i2] 
        if tx1 < tx2:
            if VERBOSE:
                print listname1, ':', (i1+1), ':', tx1[:-1], '\t( missing in', listname2, ')'
            i1 += 1
            cont1 +=1
        elif tx2 < tx1:
            if VERBOSE:
                print '( missing in', listname1, ')\t', listname2, ':', (i2+1), ':', tx2[:-1]
            i2 += 1
            cont2 +=1
        else:
            i1 += 1
            i2 += 1
    return cont1, cont2

def check_rot_off(fl, listname, distance_offset, n_offset, n_rotation):
    cont1_tot = 0
    cont2_tot = 0
    x = ""
    y = ""
    x_previous = ""
    y_previous = ""
    fl_xy = []
    fl_expected = []
    for f in fl:
        fname = f.split('/')[-1]
        fpath = f[:-len(fname)]
        xy = fname[1:-5].split('_') # (x, y, offset, rotation)
        x = xy[0]
        y = xy[1]
        if x != x_previous or y != y_previous:
            cont1, cont2 = compare_lists(fl_xy, x_previous + '_' + y_previous, fl_expected, 'Expected List')
            if cont2 > 0:
                print 'Total:', cont2, 'missing files in', x_previous + '_' + y_previous
                cont2_tot += cont2
            if cont1 > 0:
                print 'Total:', cont1, 'excessive files in', x_previous + '_' + y_previous
                cont1_tot += cont1
            x_previous = x
            y_previous = y
            fl_xy = []
            fl_expected = []
            for noff in range(-n_offset, n_offset+1):
                offset = noff * distance_offset
                for rot in range(n_rotation):
                    rotation = 360.0 * rot / n_rotation
                    f_expected = fpath + 'i{}_{}_{:.2f}_{:.2f}.png\n'.format(x, y, offset, rotation)
                    fl_expected.append(f_expected)
            fl_expected.sort()
        fl_xy.append(f)
    cont1, cont2 = compare_lists(fl_xy, x_previous + '_' + y_previous, fl_expected, 'Expected List')
    if cont2 > 0:
        print 'Total:', cont2, 'missing files in', x_previous + '_' + y_previous
        cont2_tot += cont2
    if cont1 > 0:
        print 'Total:', cont1, 'excessive files in', x_previous + '_' + y_previous
        cont1_tot += cont1
    return cont1_tot, cont2_tot

def file(s):
    if not os.path.isfile(s):
        msg = 'file not found: %r' % s
        raise argparse.ArgumentTypeError(msg)
    return s

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='This program reads two text files, each one containing a list of PNG filenames created by '
                                     'road_mapper_sampling, and report the following inconsistencies:\n'
                                     '- PNG filename belongs to one list but not to the other,\n'
                                     '- Not all PNG filenames related to pose (x,y) are present (i.e. rotation angles and offsets).',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-v', '--verbose', help='output verbosity level',  action='store_true')
    parser.add_argument('-f', '--flname1', help='text file containing a list of PNG filenames (one per line)', nargs='?', default='list1.txt', type=file)
    parser.add_argument('-f2', '--flname2', help='text file containing a list of PNG filenames (one per line)', nargs='?', default='list2.txt', type=file)
    args = parser.parse_args()
    VERBOSE = args.verbose
    if VERBOSE: print 'Verbose option set'
    flist1 = open(args.flname1)
    flist2 = open(args.flname2)
    fl1 = flist1.readlines()
    fl2 = flist2.readlines()
    fl1.sort()
    fl2.sort()
    flist1.close()
    flist2.close()

    print 'List1:', args.flname1
    print 'List2:', args.flname2
    print '\nComparing List1 (', len(fl1), 'files ) to List2 (', len(fl2), 'files ):'
    cont1, cont2 = compare_lists(fl1, 'List1', fl2, 'List2')
    print 'Totals: ----------------------------------'
    print cont2, 'missing files in List1'
    print cont1, 'missing files in List2'
    
    print '\nChecking rotations and offsets of List1'
    cont1, cont2 = check_rot_off(fl1, 'List1', distance_offset, n_offset, n_rotation)
    print 'Totals: ----------------------------------'
    print cont2, 'missing rotations or offsets in List1'
    print cont1, 'excessive rotations or offsets in List1'

    print '\nChecking rotations and offsets of List2'
    cont1, cont2 = check_rot_off(fl2, 'List2', distance_offset, n_offset, n_rotation)
    print 'Totals: ----------------------------------'
    print cont2, 'missing rotations or offsets in List2'
    print cont1, 'excessive rotations or offsets in List2'
