PROG_DESCRIPTION = \
'''
Input: This program reads one or more SVG files generated by Inkscape and searches for "paths" containing sequences of 
       Bezier curve points. The paths are then expanded to sequences of RDDF points according to the cubic Bezier curve algorithm.
       
Output: The RDDFs files corresponding to each path of each SVG file
'''
import sys, os, argparse
import math
import time;
from xml.dom import minidom

# Global definitions




def main():
    global args, count_files, total_files
    print
    
    parser = argparse.ArgumentParser(description=PROG_DESCRIPTION, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-o', '--outputdir', help='RDDF output directory   (default: .)', type=_path, default='.')
    parser.add_argument('-x', '--override', help='override existing RDDF files   (default: False)', action='store_true', dest='override', default=False)
    parser.add_argument('-s', '--scale', help='SVG scale: {mm|px}=<meters>m   (default: mm=1.0m)', type=_svg_scale, default='mm=1.0m')
    parser.add_argument('-d', '--dist_points', help='RDDF distance between waypoints in meters   (default: 0.5)', type=float, default=0.5)
    parser.add_argument('-f', '--filelist', help='text file containing a list of SVG filenames (one per line)', type=_file)
    parser.add_argument('filename', help='list of SVG filenames (separated by spaces)', type=_file, nargs='*')
    args = parser.parse_args()
    
    if not args.filelist and not args.filename:
        if len(sys.argv) > 1:
            print('At least a filename or a filelist must be passed as argument\n\n')
        parser.print_help(sys.stderr)
        sys.exit(1)
    
    count_files = 0
    total_files = len(args.filename)
    if args.filelist:
        fl = open(args.filelist)
        filelist = [ f.strip() for f in fl.readlines() if f.strip() and f.strip()[0] != '#' ]
        fl.close()
        total_files += len(filelist)

    if args.filename:
        print('********** Processing {} file{} from commandline'.format(len(args.filename), 's' * (len(args.filename) > 1))) 
        for f in args.filename:
            process_svg_file(f)

    if args.filelist:
        print('********** Processing \'{}\' filelist containing {} file{}'.format(args.filelist, len(filelist), 's' * (len(filelist) > 1))) 
        for f in filelist:
            process_svg_file(f)

if __name__ == "__main__":
    main()
