# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_carmen_comm', [dirname(__file__)])
        except ImportError:
            import _carmen_comm
            return _carmen_comm
        if fp is not None:
            try:
                _mod = imp.load_module('_carmen_comm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _carmen_comm = swig_import_helper()
    del swig_import_helper
else:
    import _carmen_comm
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _carmen_comm.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _carmen_comm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _carmen_comm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _carmen_comm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _carmen_comm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _carmen_comm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _carmen_comm.SwigPyIterator_copy(self)

    def next(self):
        return _carmen_comm.SwigPyIterator_next(self)

    def __next__(self):
        return _carmen_comm.SwigPyIterator___next__(self)

    def previous(self):
        return _carmen_comm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _carmen_comm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _carmen_comm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _carmen_comm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _carmen_comm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _carmen_comm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _carmen_comm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _carmen_comm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _carmen_comm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _carmen_comm.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _carmen_comm.FloatVector___nonzero__(self)

    def __bool__(self):
        return _carmen_comm.FloatVector___bool__(self)

    def __len__(self):
        return _carmen_comm.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _carmen_comm.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _carmen_comm.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _carmen_comm.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _carmen_comm.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _carmen_comm.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _carmen_comm.FloatVector___setitem__(self, *args)

    def pop(self):
        return _carmen_comm.FloatVector_pop(self)

    def append(self, x):
        return _carmen_comm.FloatVector_append(self, x)

    def empty(self):
        return _carmen_comm.FloatVector_empty(self)

    def size(self):
        return _carmen_comm.FloatVector_size(self)

    def swap(self, v):
        return _carmen_comm.FloatVector_swap(self, v)

    def begin(self):
        return _carmen_comm.FloatVector_begin(self)

    def end(self):
        return _carmen_comm.FloatVector_end(self)

    def rbegin(self):
        return _carmen_comm.FloatVector_rbegin(self)

    def rend(self):
        return _carmen_comm.FloatVector_rend(self)

    def clear(self):
        return _carmen_comm.FloatVector_clear(self)

    def get_allocator(self):
        return _carmen_comm.FloatVector_get_allocator(self)

    def pop_back(self):
        return _carmen_comm.FloatVector_pop_back(self)

    def erase(self, *args):
        return _carmen_comm.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _carmen_comm.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _carmen_comm.FloatVector_push_back(self, x)

    def front(self):
        return _carmen_comm.FloatVector_front(self)

    def back(self):
        return _carmen_comm.FloatVector_back(self)

    def assign(self, n, x):
        return _carmen_comm.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _carmen_comm.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _carmen_comm.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _carmen_comm.FloatVector_reserve(self, n)

    def capacity(self):
        return _carmen_comm.FloatVector_capacity(self)
    __swig_destroy__ = _carmen_comm.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _carmen_comm.FloatVector_swigregister
FloatVector_swigregister(FloatVector)


def publish_stop_command():
    return _carmen_comm.publish_stop_command()
publish_stop_command = _carmen_comm.publish_stop_command

def publish_command(v, phi, dt, publish_behavior_selector_state_flag, x=0, y=0, th=0):
    return _carmen_comm.publish_command(v, phi, dt, publish_behavior_selector_state_flag, x, y, th)
publish_command = _carmen_comm.publish_command

def publish_goal_list(x, y, th, v, phi, timestamp):
    return _carmen_comm.publish_goal_list(x, y, th, v, phi, timestamp)
publish_goal_list = _carmen_comm.publish_goal_list

def handle_messages(how_long=5e-2):
    return _carmen_comm.handle_messages(how_long)
handle_messages = _carmen_comm.handle_messages

def reset_without_initial_pose():
    return _carmen_comm.reset_without_initial_pose()
reset_without_initial_pose = _carmen_comm.reset_without_initial_pose

def reset_initial_pose(x, y, th):
    return _carmen_comm.reset_initial_pose(x, y, th)
reset_initial_pose = _carmen_comm.reset_initial_pose

def read_pose():
    return _carmen_comm.read_pose()
read_pose = _carmen_comm.read_pose

def read_laser():
    return _carmen_comm.read_laser()
read_laser = _carmen_comm.read_laser

def read_goal():
    return _carmen_comm.read_goal()
read_goal = _carmen_comm.read_goal

def read_rddf():
    return _carmen_comm.read_rddf()
read_rddf = _carmen_comm.read_rddf

def read_commands():
    return _carmen_comm.read_commands()
read_commands = _carmen_comm.read_commands

def hit_obstacle():
    return _carmen_comm.hit_obstacle()
hit_obstacle = _carmen_comm.hit_obstacle

def init():
    return _carmen_comm.init()
init = _carmen_comm.init

def simulation_reset(x, y, th, v, phi):
    return _carmen_comm.simulation_reset(x, y, th, v, phi)
simulation_reset = _carmen_comm.simulation_reset

def simulation_step(v, phi, delta_t):
    return _carmen_comm.simulation_step(v, phi, delta_t)
simulation_step = _carmen_comm.simulation_step

def simulation_read_pose():
    return _carmen_comm.simulation_read_pose()
simulation_read_pose = _carmen_comm.simulation_read_pose

def simulation_read_goal():
    return _carmen_comm.simulation_read_goal()
simulation_read_goal = _carmen_comm.simulation_read_goal

def simulation_read_laser():
    return _carmen_comm.simulation_read_laser()
simulation_read_laser = _carmen_comm.simulation_read_laser

def simulation_hit_obstacle():
    return _carmen_comm.simulation_hit_obstacle()
simulation_hit_obstacle = _carmen_comm.simulation_hit_obstacle
# This file is compatible with both classic and new-style classes.


